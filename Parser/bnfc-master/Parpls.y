-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Parpls where
import Abspls
import Lexpls
import ErrM

}

%name pExpr Expr
%name pExpr1 Expr1
%name pExpr2 Expr2

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }
  'else' { PT _ (TS _ 5) }
  'fi' { PT _ (TS _ 6) }
  'if' { PT _ (TS _ 7) }
  'then' { PT _ (TS _ 8) }

L_integ  { PT _ (TI $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Expr :: { Expr }
Expr : Expr '+' Expr1 { Add $1 $3 } 
  | Expr1 { $1 }


Expr1 :: { Expr }
Expr1 : Expr1 '*' Expr2 { Mul $1 $3 } 
  | Expr2 { $1 }


Expr2 :: { Expr }
Expr2 : 'if' Expr 'then' Expr 'else' Expr 'fi' { Ite $2 $4 $6 } 
  | Integer { Val $1 }
  | '(' Expr ')' { $2 }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

